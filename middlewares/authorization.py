from aiogram.types import Message
from aiogram import BaseMiddleware
from db.funcs import is_authorized
from aiogram.fsm.context import FSMContext
from handlers.user_router import Authorization
from typing import Callable, Awaitable, Dict, Any


class AuthorizationMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any],
    ) -> Any:
        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ —Ç–µ–∫—Å—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/start" - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ª—é–±—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if event.text and event.text.startswith("/start"):
            return await handler(event, data)

        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ —Ç–µ–∫—Å—Ç, –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –≤–æ –≤—Ä–µ–º—è –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ª—é–±—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        state: FSMContext = data.get("state")
        current_state = await state.get_state() if state else None
        if (
            event.text
            and not event.text.startswith("/")
            and current_state == Authorization.send_code.state
        ):
            return await handler(event, data)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = event.from_user.id
        if await is_authorized(user_id):
            return await handler(event, data)
        else:
            await event.reply(
                text=f"""üò¢ –ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.

–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ‚¨áÔ∏è
{current_state}"""
            )
            return
