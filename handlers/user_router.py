import db.funcs as f
import db.models as m
import utils.utils as u
import keyboards.reply as rkb
import keyboards.inline as ikb
from config import settings
from datetime import datetime
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove


# —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_router = Router()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@user_router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if await f.user_exists(message.from_user.id):
        await message.answer(
            text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è —Å–Ω–æ–≤–∞, {message.from_user.first_name}!"
        )

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if await f.is_authorized(message.from_user.id):
            await select_command(message)
        else:
            # –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
            await sign_up_command(message, state)
    else:
        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
        code = u.generate_code()

        # –æ–±—ä–µ–∫—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram-–ø—Ä–æ—Ñ–∏–ª—è
        user = m.UsersOrm(
            id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            registration_date=u.get_utc_time(),
            code=code,
            is_authorized=False,
        )

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω—É
        await message.bot.send_message(
            chat_id=settings.ADMIN_ID,
            text=f"""üÜï –ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø üÜï

–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ <code>{code}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{message.from_user.first_name}</b>""",
        )

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await f.add_user(user)

        # –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        await sign_up_command(message, state)


# –∫–ª–∞—Å—Å –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
class Authorization(StatesGroup):
    send_code = State()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sign_up
@user_router.message(Command("sign_up"))
async def sign_up_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text="–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –í–≤–µ–¥–∏ –∫–æ–¥:")
    await state.set_state(Authorization.send_code)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_router.message(Authorization.send_code)
async def send_code_state(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = message.text.strip()

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    code = await f.get_code(message.from_user.id)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    if text == code:
        await f.authorize_user(message.from_user.id)
        await message.answer(
            text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
            message_effect_id="5046509860389126442",
        )
        await message.answer(
            text=f"""üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /about"""
        )
        await state.clear()
        await select_command(message)
    else:
        await message.reply(
            text=f"""üò¢ –ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.

–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ‚¨áÔ∏è"""
        )
        return


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /select
@user_router.message(Command("select"))
async def select_command(message: Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=rkb.select())


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
@user_router.message(F.text == "üôãüèº‚Äç‚ôÇÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def instruction_button(message: Message, state: FSMContext):
    await about_command(message)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ"
@user_router.message(F.text == "üìã –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ")
async def add_write_off_button(message: Message, state: FSMContext):
    await write_off_command(message, state)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about
@user_router.message(Command("about"))
async def about_command(message: Message):
    await message.answer(
        text=f"""–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ</b> –∏ —Å–ª–µ–¥—É–π —É–∫–∞–∑–∞–Ω–∏—è–º –¥–∞–ª–µ–µ:

1. –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É
2. –í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–∏—è
3. –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
4. –í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    <b>–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–¥—É–∫—Ç–∞  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ  –µ–¥–∏–Ω–∏—Ü—ã_–∏–∑–º–µ—Ä–µ–Ω–∏—è</b>"""
    )
    await select_command(message)


# –∫–ª–∞—Å—Å –°–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /write_off
class WriteOff(StatesGroup):
    making_write_off = State()
    typing_comment = State()
    typing_products = State()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /write_off
@user_router.message(Command("write_off"))
async def write_off_command(message: Message, state: FSMContext):
    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await message.answer(
        text="–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ - —Å–ª–µ–¥—É–π —É–∫–∞–∑–∞–Ω–∏—è–º –¥–∞–ª–µ–µ:",
        reply_markup=ReplyKeyboardRemove(),
    )

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(to_delete_message_id=msg.message_id)

    # –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Å–ø–∏—Å–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    await message.answer(text="–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=ikb.select_date())

    # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –°–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(WriteOff.making_write_off)


# –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
@user_router.callback_query(WriteOff.making_write_off, F.data.startswith("month:"))
async def change_month(callback: CallbackQuery):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
    month = int(callback.data.split(":")[1])

    # –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑—É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
    if abs(month) > 2:
        await callback.answer(text=f"–≤—ã–±–µ—Ä–∏ –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É")
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
            reply_markup=ikb.select_date(),
        )
    else:
        # –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Å —É—á—ë—Ç–æ–º –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
            reply_markup=ikb.select_date(month=month),
        )


# –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã —Å–ø–∏—Å–∞–Ω–∏—è
@user_router.callback_query(WriteOff.making_write_off, F.data.startswith("date:"))
async def change_month(callback: CallbackQuery, state: FSMContext):
    # —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    data = await state.get_data()
    to_delete_message_id = data.get("to_delete_message_id")
    await callback.bot.delete_message(
        chat_id=callback.message.chat.id, message_id=to_delete_message_id
    )

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    date_str = callback.data.split(":")[1]

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω—è, –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞ –≤ —á–∏—Å–ª–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    day, month, year = map(int, date_str.split("/"))

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
    await state.update_data(write_off_date=datetime(year=year, month=month, day=day))

    # –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–∏—è
    await callback.message.edit_text(
        text=f"""–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ <b>{day:02}.{month:02}.{year}</b>

–í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–∏—è:""",
        reply_markup=ikb.select_write_off_type(),
    )


# –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_router.callback_query(
    WriteOff.making_write_off, F.data.in_({"waste", "other", "staff"})
)
async def select_type(callback: CallbackQuery, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Å–ø–∏—Å–∞–Ω–∏—è
    write_off_type = callback.data
    await state.update_data(write_off_type=write_off_type)

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Å–ø–∏—Å–∞–Ω–∏—è –∏ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()

    showed_write_off_date = (data.get("write_off_date")).strftime("%d.%m.%Y")
    await state.update_data(showed_write_off_date=showed_write_off_date)

    write_off_types = {
        "staff": "–ü–∏—Ç–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
        "waste": "–ü–æ—Ä—á–∞",
        "other": "–ü—Ä–æ—á–µ–µ",
    }
    showed_write_off_type = write_off_types[write_off_type]
    await state.update_data(showed_write_off_type=showed_write_off_type)

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ id —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(editable_message_id=callback.message.message_id)

    # –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await callback.message.edit_text(
        text=f"""–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ <b>{showed_write_off_date}</b>
–ü—Ä–∏—á–∏–Ω–∞ —Å–ø–∏—Å–∞–Ω–∏—è: <b>{showed_write_off_type}</b>

–í–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å "-":
"""
    )

    # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.set_state(WriteOff.typing_comment)


# –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_router.message(WriteOff.typing_comment)
async def typing_comment_state(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    comment = message.text.strip()
    await state.update_data(comment=comment)

    # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    showed_write_off_date = data.get("showed_write_off_date")
    showed_write_off_type = data.get("showed_write_off_type")

    # –ø–æ–ª—É—á–µ–Ω–∏–µ id —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    editable_message_id = data.get("editable_message_id")

    # —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    new_text = f"""–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ <b>{showed_write_off_date}</b>
–ü—Ä–∏—á–∏–Ω–∞ —Å–ø–∏—Å–∞–Ω–∏—è: <b>{showed_write_off_type}</b>
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{comment}</b>

–í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.

–ù–∞–ø—Ä–∏–º–µ—Ä:
–º–æ–ª–æ–∫–æ 2 –ª
–∫—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ 7,5 –∫–≥
—è–π—Ü–∞ 20 —à—Ç
"""

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    await message.bot.edit_message_text(
        chat_id=message.chat.id, message_id=editable_message_id, text=new_text
    )

    # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    await state.set_state(WriteOff.typing_products)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–Ω–µ—Å–µ–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏–π –≤ –ë–î
@user_router.message(WriteOff.typing_products)
async def typing_products_state(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    product_list = message.text.strip()

    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    user_id = message.from_user.id
    write_off_type = data.get("write_off_type")
    comment = data.get("comment")
    write_off_date = data.get("write_off_date")
    editable_message_id = data.get("editable_message_id")
    showed_write_off_date = data.get("showed_write_off_date")
    showed_write_off_type = data.get("showed_write_off_type")

    # –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    try:
        parsed_data = u.parsing_product_list(
            user_id=user_id,
            write_off_type=write_off_type,
            comment=comment,
            product_list=product_list,
            date=write_off_date,
        )

        # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=editable_message_id,
            text=f"""‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ

<pre>{showed_write_off_date} >>> {showed_write_off_type}
_______________
{product_list}
_______________
{comment}</pre>""",
        )

        # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()

        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î
        await f.add_write_off(parsed_data)

        # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await select_command(message)

    except ValueError as e:
        await message.answer(text=f"‚ö†Ô∏è {e}")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@user_router.message(StateFilter(None))
async def unknown_message(message: Message, state: FSMContext):
    await message.answer("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π /about –∏–ª–∏ /write_off")
    await state.clear()
    await select_command(message)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "nothing"
@user_router.callback_query(F.data == "nothing")
async def ignore_callback(callback: CallbackQuery):
    await callback.answer()
